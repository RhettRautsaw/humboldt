% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/humboldt47.R
\name{humboldt.plot.overlap}
\alias{humboldt.plot.overlap}
\title{Plot niche overlap of 2 species in environmental space}
\usage{
humboldt.plot.overlap(in.pca, nsp1, nsp2, nenv1, nenv2,
  pdfname = "OverLapPlot.pdf", pdf.out = T, swap = F)
}
\arguments{
\item{in.pca}{A single dataset with two PCs for both species (sp1 & sp2) and both environmental spaces (env1 & evn2). Note the input order in the matrix needs to be in this order: sp1, sp2, env1, env2 (seriously- do it!)}

\item{nsp1}{the number of records in sp1 dataset}

\item{nsp2}{the number of records in sp2 dataset}

\item{nenv1}{the number of records in env1 dataset}

\item{nenv2}{the number of records in env2 dataset}

\item{pdfname}{a string for the output pdf of the results}

\item{swap}{if swap=T, colors will be switched in plots and the order (from top to bottom) will be reversed. The default value is FALSE.}
}
\value{
Plots the overlap of two species' environmental space based on PCs. This code is a derivative work based on a function 'NiceOverPlot' by  Javi Fernández-López and Irene Villa.

This tool uses the scores of principal components (or 2 environmental variables. Only two dimensions can be used. If performing a PCA, I strongly encourage you to run a species distribution model using lots of environmental data on the focal species and then load only the top contributing environmental variables to be included in the PCA. This way all included variables are known to be relevant in both species distributions. This can be done inside Humboldt (via humboldt.top.env) by importing many environmental variables and letting program select only those important. Alternatively, this can also be done using another method (MaxEnt) outside of R and then use only variables deemed important in the species' distributions
}
\description{
Plot niche overlap of 2 species in environmental space
}
\examples{
library(humboldt)
##load environment variables for all sites of the study area 1 (env1). Column names should be x,y,X1,X2,...,Xn)
##load environmental variables for all sites of the study area 1 (env1). Column names should be x,y,X1,X2,...,Xn)
env1<-read.delim("env1.txt",h=T,sep="\\t")

## load environmental variables for all sites of the study area 2 (env2). Column names should be x,y,X1,X2,...,Xn)
env2<-read.delim("env2.txt",h=T,sep="\\t") 

## remove NAs and make sure all variables are imported as numbers
env1<-humboldt.scrub.env(env1)
env2<-humboldt.scrub.env(env2)

##merge environment files
env12<-rbind(env1,env2)

##load occurrence sites for the species at study area 1 (env1). Column names should be 'sp','x','y'
occ.sp1<-na.exclude(read.delim("sp1.txt",h=T,sep="\\t"))

##load occurrence sites for the species at study area 2 (env2). Column names should be 'sp','x','y' 
occ.sp2<-na.exclude(read.delim("sp2.txt",h=T,sep="\\t"))

##remove occurrences closer than a minimum distance to each other (remove aggregation). Setting min.dist=0 will remove no occurrence.
occ.sp1<-humboldt.occ.rarefy(in.pts=occ.sp1,colxy=2:3, rarefy.dist=40, rarefy.units="km")
occ.sp2<-humboldt.occ.rarefy(in.pts=occ.sp2,colxy=2:3, rarefy.dist=40, rarefy.units="km")

## env.reso should be the resolution of the environmental data grid
##sample environment using humboldt.sample.sp() function
env.reso=0.166667
occ.sp1<-na.exclude(humboldt.sample.spp(dfsp=occ.sp1,colspxy=2:3,colspkept=NULL,dfvar=env1,colvarxy=1:2,colvar="all",resolution=env.reso))
occ.sp2<-na.exclude(humboldt.sample.spp(dfsp=occ.sp2,colspxy=2:3,colspkept=NULL,dfvar=env2,colvarxy=1:2,colvar="all",resolution=env.reso))

row.sp1<-(nrow(env1)+nrow(env2)+1):(nrow(env1)+nrow(env2)+nrow(occ.sp1))
row.sp2<-(nrow(env1)+nrow(env2)+nrow(occ.sp1)+1):(nrow(env1)+nrow(env2)+nrow(occ.sp1)+nrow(occ.sp2))

##row weighting of environment density for PCA
row.w.1.env<-1-(nrow(env1)/nrow(env12)) # prevalence of env1
row.w.2.env<-1-(nrow(env2)/nrow(env12)) # prevalence of env2
row.w.env <-c(rep(row.w.1.env, nrow(env1)),rep(row.w.2.env, nrow(env2)),rep(0, nrow(occ.sp1)),rep(0, nrow(occ.sp2)))

##create a global dataset with all environments and species, include environmental variables #' e.var[x1-xN]
e.var<-c(3:21)
data.env.occ2<-rbind(occ.sp1,occ.sp2,env1,env2)[e.var]

#data.env2.occ<-rbind(env1,env2,occ.sp1,occ.sp2)[e.var]
row.sp1<-1:nrow(occ.sp1)
row.sp2<-(nrow(occ.sp1)+1):(nrow(occ.sp1)+nrow(occ.sp2))
row.env1<-(nrow(occ.sp1)+nrow(occ.sp2)+1):(nrow(occ.sp1)+nrow(occ.sp2)+nrow(env1))
row.env2<-(nrow(occ.sp1)+nrow(occ.sp2)+nrow(env1)+1):(nrow(occ.sp1)+nrow(occ.sp2)+nrow(env1)+nrow(env2))

pca.cal <-dudi.pca(data.env.occ2, center = T, scale = T, scannf = F, nf = 2)

nSP1<-nrow(sp1<- pca.cal$li[row.sp1,])
nSP2<-nrow(sp2<- pca.cal$li[row.sp2,])
nCM1<-nrow(env1<- pca.cal$li[row.env1,])
nCM2<-nrow(env2<- pca.cal$li[row.env2,])
humboldt.plot.overlap(pca.cal, nsp1=nSP1, nsp2=nSP2, nenv1=nCM1, nenv2=nCM2,pdfname="OverlapSp1and2") 
}
\seealso{
\code{humboldt.g2e, humboldt.equivalency.test, humboldt.background.test, humboldt.niche.overlap, humboldt.plot.niche,humboldt.doitall} which use or depend on outputs of this function
}
